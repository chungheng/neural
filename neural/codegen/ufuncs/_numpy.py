"""
Mapping of numpy ufunc to sympy functions
"""
import numpy as np
import sympy as sp
import sympy.codegen.cfunctions
# [name for name,v in np.__dict__.items() if isinstance(v, np.ufunc)]

MAPPING = {
    np.abs : 'sympy.Abs',
    np.absolute : 'sympy.Abs',
    np.add : 'sympy.Add',
    np.arccos : 'sympy.acos',
    np.arccosh : 'sympy.acosh',
    np.arcsin : 'sympy.asin',
    np.arcsinh : 'sympy.asinh',
    np.arctan : 'sympy.atan',
    np.arctan2 : 'sympy.atan2',
    np.arctanh : 'sympy.atanh',
    np.bitwise_and : 'sympy.And',
    np.bitwise_or : 'sympy.Or',
    np.bitwise_xor : 'sympy.Xor',
    np.bitwise_not : 'sympy.Not',
    np.matmul : None,
    np.cbrt : 'sympy.cbrt',
    np.ceil : 'sympy.ceiling',
    np.conj : 'sympy.conjugate',
    np.conjugate : 'sympy.conjugate',
    np.copysign : None,
    np.cos : 'sympy.cos',
    np.cosh : 'sympy.cosh',
    np.deg2rad : None,
    np.degrees : None,
    np.divide : 'sympy.div',
    np.divmod : divmod,
    np.equal : None,
    np.exp : 'sympy.exp',
    np.exp2 : None,
    np.expm1 : 'sympy.codegen.cfunctions.expm1',
    np.fabs : 'sympy.Abs',
    np.floor : 'sympy.floor',
    np.floor_divide : None,
    np.float_power : None,
    np.fmax : 'sympy.Max',
    np.fmin : 'sympy.Min',
    np.fmod : 'sympy.Mod',
    np.frexp : None,
    np.gcd : 'sympy.gcd',
    np.greater : 'sympy.StrictGreaterThan',
    np.greater_equal : 'sympy.GreaterThan',
    np.heaviside : 'sympy.Heaviside',
    np.hypot : None,
    np.invert : 'sympy.Not',
    np.isfinite : None,
    np.isinf : None,
    np.isnan : None,
    np.isnat : None,
    np.lcm : 'sympy.lcm',
    np.ldexp : None,
    np.left_shift : None,
    np.less : 'sympy.StrictLessThan',
    np.less_equal : 'sympy.LessThan',
    np.log : 'sympy.log',
    np.log10 : 'sympy.codegen.cfunctions.log10',
    np.log1p : 'sympy.codegen.cfunctions.log1p',
    np.log2 : 'sympy.codegen.cfunctions.log2',
    np.logaddexp : None,
    np.logaddexp2 : None,
    np.logical_and : 'sympy.And',
    np.logical_not : 'sympy.Not',
    np.logical_or : 'sympy.Or',
    np.logical_xor : 'sympy.Xor',
    np.maximum : 'sympy.Max',
    np.minimum : 'sympy.Min',
    np.mod : 'sympy.Mod',
    np.modf : 'sympy.Mod',
    np.multiply : 'sympy.Mul',
    np.negative : None,
    np.nextafter : None,
    np.not_equal : 'sympy.Ne',
    np.positive : None,
    np.power : 'sympy.Pow',
    np.rad2deg : None,
    np.radians : None,
    np.reciprocal : None,
    np.remainder : None,
    np.right_shift : None,
    np.rint : None,
    np.sign : 'sympy.sign',
    np.signbit : None,
    np.sin : 'sympy.sin',
    np.sinh : 'sympy.sinh',
    np.spacing : None,
    np.sqrt : 'sympy.sqrt',
    np.square : None,
    np.subtract : None,
    np.tan : 'sympy.tan',
    np.tanh : 'sympy.tanh',
    np.true_divide : None,
    np.trunc : None,
}

SUPPORTED = [key.__name__ for key,val in MAPPING.items() if val is not None]